apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = 'com.github.halysongoncalves'
                pom.artifactId = 'pugnotification'
                pom.version = '1.5.0'

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: 'halysongoncalves', password: '1990limahlglima')
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: 'halysongoncalves', password: '1990limahlglima')
                }

                pom.project {
                    name 'PugNotification'
                    packaging 'aar'
                    description 'A powerful library for creating notifications in android platform.'
                    url 'https://github.com/halysongoncalves/PugNotification'

                    scm {
                        url 'https://github.com/halysongoncalves/PugNotification'
                        connection 'scm:git@github.com:halysongoncalves/PugNotification.git'
                        developerConnection 'scm:git@github.com:halysongoncalves/PugNotification.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'halysongoncalves'
                            name 'Halyson Lima Gon√ßalves'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}